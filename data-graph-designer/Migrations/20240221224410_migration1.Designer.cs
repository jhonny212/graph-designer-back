// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using data_graph_designer;

#nullable disable

namespace data_graph_designer.Migrations
{
    [DbContext(typeof(GraphDesignerContext))]
    [Migration("20240221224410_migration1")]
    partial class migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("data_graph_designer.Models.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("data_graph_designer.Models.DashboardColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Columns")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DashboardColumns");
                });

            modelBuilder.Entity("data_graph_designer.Models.DashboardRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnsId")
                        .HasColumnType("integer");

                    b.Property<int?>("DashboardId")
                        .HasColumnType("integer");

                    b.Property<int>("HeightId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ColumnsId");

                    b.HasIndex("DashboardId");

                    b.HasIndex("HeightId");

                    b.ToTable("DashboardRows");
                });

            modelBuilder.Entity("data_graph_designer.Models.Endpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DatabaseLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EndpointTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EndpointTypeId");

                    b.ToTable("Endpoints");
                });

            modelBuilder.Entity("data_graph_designer.Models.EndpointDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EndpointId")
                        .HasColumnType("integer");

                    b.Property<string>("NameApp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameDbName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeDataId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EndpointId");

                    b.HasIndex("TypeDataId");

                    b.ToTable("EndpointDetails");
                });

            modelBuilder.Entity("data_graph_designer.Models.EndpointType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("EndpointTypes");
                });

            modelBuilder.Entity("data_graph_designer.Models.Graph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DashboardRowId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EndpointId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeGraphId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DashboardRowId");

                    b.HasIndex("EndpointId");

                    b.HasIndex("TypeGraphId");

                    b.ToTable("Graphs");
                });

            modelBuilder.Entity("data_graph_designer.Models.Height", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Heights");
                });

            modelBuilder.Entity("data_graph_designer.Models.LineBar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AreaStyle")
                        .HasColumnType("boolean");

                    b.Property<int>("GraphId")
                        .HasColumnType("integer");

                    b.Property<string>("PositionLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Xaxis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("LineBar");
                });

            modelBuilder.Entity("data_graph_designer.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<string>("Stack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("data_graph_designer.Models.TypeDatum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeDb")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeData");
                });

            modelBuilder.Entity("data_graph_designer.Models.TypeGraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeGraphs");
                });

            modelBuilder.Entity("data_graph_designer.Models.TypeOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeOperations");
                });

            modelBuilder.Entity("data_graph_designer.Models.DashboardRow", b =>
                {
                    b.HasOne("data_graph_designer.Models.DashboardColumn", "Columns")
                        .WithMany("DashboardRows")
                        .HasForeignKey("ColumnsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("data_graph_designer.Models.Dashboard", "Dashboard")
                        .WithMany("DashboardRows")
                        .HasForeignKey("DashboardId");

                    b.HasOne("data_graph_designer.Models.Height", "Height")
                        .WithMany("DashboardRows")
                        .HasForeignKey("HeightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Columns");

                    b.Navigation("Dashboard");

                    b.Navigation("Height");
                });

            modelBuilder.Entity("data_graph_designer.Models.Endpoint", b =>
                {
                    b.HasOne("data_graph_designer.Models.EndpointType", "EndpointType")
                        .WithMany("Endpoints")
                        .HasForeignKey("EndpointTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndpointType");
                });

            modelBuilder.Entity("data_graph_designer.Models.EndpointDetail", b =>
                {
                    b.HasOne("data_graph_designer.Models.Endpoint", "Endpoint")
                        .WithMany("EndpointDetails")
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("data_graph_designer.Models.TypeDatum", "TypeData")
                        .WithMany("EndpointDetails")
                        .HasForeignKey("TypeDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endpoint");

                    b.Navigation("TypeData");
                });

            modelBuilder.Entity("data_graph_designer.Models.Graph", b =>
                {
                    b.HasOne("data_graph_designer.Models.DashboardRow", "DashboardRow")
                        .WithMany("Graphs")
                        .HasForeignKey("DashboardRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("data_graph_designer.Models.Endpoint", "Endpoint")
                        .WithMany("Graphs")
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("data_graph_designer.Models.TypeGraph", "TypeGraph")
                        .WithMany("Graphs")
                        .HasForeignKey("TypeGraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DashboardRow");

                    b.Navigation("Endpoint");

                    b.Navigation("TypeGraph");
                });

            modelBuilder.Entity("data_graph_designer.Models.LineBar", b =>
                {
                    b.HasOne("data_graph_designer.Models.Graph", "Graph")
                        .WithMany()
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Graph");
                });

            modelBuilder.Entity("data_graph_designer.Models.Series", b =>
                {
                    b.HasOne("data_graph_designer.Models.EndpointDetail", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("data_graph_designer.Models.Dashboard", b =>
                {
                    b.Navigation("DashboardRows");
                });

            modelBuilder.Entity("data_graph_designer.Models.DashboardColumn", b =>
                {
                    b.Navigation("DashboardRows");
                });

            modelBuilder.Entity("data_graph_designer.Models.DashboardRow", b =>
                {
                    b.Navigation("Graphs");
                });

            modelBuilder.Entity("data_graph_designer.Models.Endpoint", b =>
                {
                    b.Navigation("EndpointDetails");

                    b.Navigation("Graphs");
                });

            modelBuilder.Entity("data_graph_designer.Models.EndpointType", b =>
                {
                    b.Navigation("Endpoints");
                });

            modelBuilder.Entity("data_graph_designer.Models.Height", b =>
                {
                    b.Navigation("DashboardRows");
                });

            modelBuilder.Entity("data_graph_designer.Models.TypeDatum", b =>
                {
                    b.Navigation("EndpointDetails");
                });

            modelBuilder.Entity("data_graph_designer.Models.TypeGraph", b =>
                {
                    b.Navigation("Graphs");
                });
#pragma warning restore 612, 618
        }
    }
}
